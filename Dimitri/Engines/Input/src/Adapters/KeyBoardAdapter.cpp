#include "KeyBoardAdapter.h"

Enums::EventEnum Adapters::KeyBoardAdapter::translate_to_enum(const SDL_Event event)const
{
	switch (event.key.keysym.sym)
	{
        case SDLK_0:
            return Enums::EventEnum::KEY_PRESS_0;
        case SDLK_1:
            return Enums::EventEnum::KEY_PRESS_1;
        case SDLK_2:
            return Enums::EventEnum::KEY_PRESS_2;
        case SDLK_3:
            return Enums::EventEnum::KEY_PRESS_3;
        case SDLK_4:
            return Enums::EventEnum::KEY_PRESS_4;
        case SDLK_5:
            return Enums::EventEnum::KEY_PRESS_5;
        case SDLK_6:
            return Enums::EventEnum::KEY_PRESS_6;
        case SDLK_7:
            return Enums::EventEnum::KEY_PRESS_7;
        case SDLK_8:
            return Enums::EventEnum::KEY_PRESS_8;
        case SDLK_9:
            return Enums::EventEnum::KEY_PRESS_9;
	    case SDLK_LEFT:
		    return Enums::EventEnum::KEY_PRESS_LEFT;
	    case SDLK_RIGHT:
		    return Enums::EventEnum::KEY_PRESS_RIGHT;
        case SDLK_UP:
            return Enums::EventEnum::KEY_PRESS_UP;
        case SDLK_DOWN:
            return Enums::EventEnum::KEY_PRESS_DOWN;
	    case SDLK_a:
		    return Enums::EventEnum::KEY_PRESS_A;
        case SDLK_b:
            return Enums::EventEnum::KEY_PRESS_B;
        case SDLK_c:
            return Enums::EventEnum::KEY_PRESS_C;
        case SDLK_d:
            return Enums::EventEnum::KEY_PRESS_D;
        case SDLK_e:
            return Enums::EventEnum::KEY_PRESS_E;
        case SDLK_f:
            return Enums::EventEnum::KEY_PRESS_F;
        case SDLK_g:
            return Enums::EventEnum::KEY_PRESS_G;
        case SDLK_h:
            return Enums::EventEnum::KEY_PRESS_H;
        case SDLK_i:
            return Enums::EventEnum::KEY_PRESS_I;
        case SDLK_j:
            return Enums::EventEnum::KEY_PRESS_J;
        case SDLK_k:
            return Enums::EventEnum::KEY_PRESS_K;
        case SDLK_l:
            return Enums::EventEnum::KEY_PRESS_L;
        case SDLK_m:
            return Enums::EventEnum::KEY_PRESS_M;
        case SDLK_n:
            return Enums::EventEnum::KEY_PRESS_N;
        case SDLK_o:
            return Enums::EventEnum::KEY_PRESS_O;
        case SDLK_p:
            return Enums::EventEnum::KEY_PRESS_P;
        case SDLK_q:
            return Enums::EventEnum::KEY_PRESS_Q;
        case SDLK_r:
            return Enums::EventEnum::KEY_PRESS_R;
        case SDLK_s:
            return Enums::EventEnum::KEY_PRESS_S;
        case SDLK_t:
            return Enums::EventEnum::KEY_PRESS_T;
        case SDLK_u:
            return Enums::EventEnum::KEY_PRESS_U;
        case SDLK_v:
            return Enums::EventEnum::KEY_PRESS_V;
        case SDLK_w:
            return Enums::EventEnum::KEY_PRESS_W;
        case SDLK_x:
            return Enums::EventEnum::KEY_PRESS_X;
        case SDLK_y:
            return Enums::EventEnum::KEY_PRESS_Y;
        case SDLK_z:
            return Enums::EventEnum::KEY_PRESS_Z;
        case SDLK_BACKSPACE:
            return Enums::EventEnum::KEY_PRESS_BACKSPACE;
        case SDLK_ESCAPE:
            return Enums::EventEnum::KEY_PRESS_ESC;
        case SDLK_LCTRL:
            return Enums::EventEnum::KEY_PRESS_CTRL;
        case SDLK_LSHIFT:
            return Enums::EventEnum::KEY_PRESS_SHIFT;
        case SDLK_KP_ENTER:
            return Enums::EventEnum::KEY_PRESS_ENTER;
        default:
            return Enums::EventEnum::NOT_SUPPORTED;
	}
}